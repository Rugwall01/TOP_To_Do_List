@font-face {
    font-family: 'Arvo';
    src: url("./assets/Arvo/Arvo-Regular.ttf") format ('truetype');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'ArvoBold';
    src: url("./assets/Arvo/Arvo-Bold.ttf") format('truetype');
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: 'ArvoItalic';
    src: url("./assets/Arvo/Arvo-Italic.ttf") format('truetype');
    font-weight: normal;
    font-style: italic;
}

@font-face {
    font-family: 'ArvoBoldItalic';
    src: url("./assets/Arvo/Arvo-BoldItalic.ttf") format('truetype');
    font-weight: bold;
    font-style: italic;
}

/* html {
    --screen-ratio: 16/9;
} */

/* 1. Use a more-intuitive box-sizing model */
*, *::before, *::after {
    box-sizing: border-box;
  }
  /* 2. Remove default margin */
  * {
    margin: 0;
  }
  body {
    /* 3. Add accessible line-height */
    line-height: 1.5;
    /* 4. Improve text rendering */
    -webkit-font-smoothing: antialiased;
  }
  /* 5. Improve media defaults */
  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }
  /* 6. Inherit fonts for form controls */
  input, button, textarea, select {
    /* font: inherit; */
    overflow-wrap: break-word;
  }
  /* 7. Avoid text overflows */
  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  /* 8. Improve line wrapping */
  p {
    text-wrap: pretty;
  }
  h1, h2, h3, h4, h5, h6 {
    text-wrap: balance;
  }
  /*
    9. Create a root stacking context
  */
  #root, #__next {
    isolation: isolate;
  }


body {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
    width: 100vw;
    overflow: scroll;
}

.content {
    display: flex;
    flex-direction: column;
    /* justify-content: space-around; */
    align-items: left;
    height: 70%;
    width: 50%;
    /* border: 1px solid red; */
    overflow: auto;
    background-color: whitesmoke;
    margin-bottom: 5%;
}

.inputControls {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
    height: 30%;
    width: 50%;
    /* border: 1px solid red; */
}

#submitBtn {
    width: 15%;
    height: 7.5%;
}

.displayCard {
    box-sizing: border-box;
    height: fit-content;
    min-height: 75px;
    max-height: 75px;
    padding: 4px 15px 35px 15px; 
    border: 7px solid rgba(169, 169, 169, 0.068);
    outline: 1px solid rgba(169, 169, 169, 0.644);
    background-color: rgba(211, 211, 211, 0.342);
    /* background-color: rgba(199, 8, 8, 0.534); */
    border-radius: 6px;
    overflow: hidden;
    /* overflow-wrap: break-word; */
    white-space: normal;
    text-overflow: ellipsis;
}

.displayCard p {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    /* border: 1px solid red; */
    transform: translateX(14px);
    padding-bottom: 2px;
}

/* .displayCard p:nth-child(2) {
    max-width: 100px;
    overflow: hidden;
} */



.displayCard:hover {
    background-color: rgba(211, 211, 211, 0.699);
    cursor: pointer;

}

.taskSpan1 {
    font-family: 'ArvoBoldItalic';
    /* border: 1px solid red; */
}

.descSpan1 {
    font-family: 'ArvoBoldItalic';
    /* border: 1px solid red; */
}



.taskSpan2, .descSpan2 {
    /* position: absolute; */
    font-family: 'ArvoItalic';
    /* border: 1px solid red; */
    text-decoration: underline solid black;
    text-underline-offset: 5px;
    /* transform: translateY(-px); */

}

.content .displayCard>p>span {
    max-width: 300px;
}


#itemDesc {
    min-width: 220px;
}

#itemName {
    min-width: 190px;
}

input::placeholder {
    font-family: 'Consolas', 'Courier', 'Courier New', 'UI Monospace', 'IBM Plex Mono';
}

textarea::placeholder {
    font-family: 'Consolas', 'Courier', 'Courier New', 'UI Monospace', 'IBM Plex Mono';
}


.displayCard.show {
    position: absolute;
    min-height: 100vh;
    min-width: 100vw;
    background-color: rgba(0, 0, 0, 0.938);
    display: flex;
    /* flex-direction: column; */
    justify-content: center;
    align-items: center;
    text-align: left;
    top: 0;
    left: 0;
    white-space: normal;
    overflow: visible;
    text-overflow: unset;
    white-space: normal;
    z-index: 3;


}


.displayCard.show>p {
    /* border: 1px solid blue; */
    width: 820px;
    display: grid;
    grid-template-columns: .135fr 1fr;
    grid-template-rows: .5fr 1fr;
    grid-template-areas: 
    "task1 task2"
    "desc1 desc2";
    top: 0;
    left: 0;
    /* justify-items: center; */
    /* align-content: center; */
    /* justify-content: center;
    align-items: center; */

    /* padding: 25% 30% 30% 30%; */
    white-space: normal;
    overflow: visible;
    overflow-wrap: break-word;

    font-size: larger;
    letter-spacing: .1rem;
    /* color: rgb(255, 0, 0); */
    color: white;

    /* text-shadow: 
    1px 1px 0 #611d1d,  
    -1px -1px 0 #611d1d,  
    1px -1px 0 #611d1d,  
    -1px 1px 0 #611d1d; */
    

    text-shadow: 
    1px 1px 0 #000,  
    -1px -1px 0 #000,  
    1px -1px 0 #000,  
    -1px 1px 0 #000;

    background-color: rgba(199, 8, 8, 0.26);
    outline: 200px solid rgba(199, 8, 8, 0.26);
    font-family: 'Consolas';
}

.displayCard.show>p span {
    /* display: flex; */
    /* border: 1px solid red; */
    white-space: normal;
    max-width: 640px;
    padding-left: 4px;
   
}

/* .taskSpan2div {
    position: absolute;
    max-width: 100%;
    max-height: 1%;
    border: 3px solid purple;
} */

.displayCard.show .taskSpan1 {
    grid-area: task1;
}

.displayCard.show .taskSpan2 {
    grid-area: task2;
    margin-left: -94px;
    white-space: normal;
    overflow: visible;
    overflow-wrap: break-word;
    word-wrap: break-word;
    text-decoration: underline solid white;
    text-underline-offset: 5px;
    

}

.displayCard.show .descSpan1 {
    grid-area: desc1;
    /* margin: 0;
    padding: 0;
    border: 10px solid green; */
    
}

.displayCard.show .descSpan2 {
    grid-area: desc2;
    margin-left: 4px;
    width: 680px;
    white-space: normal;
    overflow: visible;
    overflow-wrap: break-word;
    word-wrap: break-word;
    text-decoration: underline solid white;
    text-underline-offset: 5px;
}




.displayCard.important {
    background-color: rgba(199, 8, 8, 0.534);
}

.trashCan {
    position: relative;
    height: 17px;
    width: 17px;
    transform: translate(-14px, -26px);
    /* border: 2px solid red; */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
}




/* .displayCard>p>.taskSpan2 {
    max-width: 200px !important;
    overflow: hidden;
    border: 1px solid blue;

} */


.customCheckboxWrap {
    position: relative;
    height: 17px;
    width: 17px;
    transform: translate(-12px, -24px);
    /* border: 2px solid red; */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    margin: 0;
}

.custom-checkbox {
    position: relative;
    display: inline-block;
    width: 30px;
    height: 30px;
    cursor: pointer;
}

.custom-checkbox input {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
}

.checkmark {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 14px;
    height: 14px;
    background-color: #ddd;
    border-radius: 50%;
    transition: background-color 0.3s ease, transform 0.3s ease;
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
}

.custom-checkbox input:checked + .checkmark {
    background-color: red; 
    transform: scale(1.1); 
}

.checkmark::after {
    content: "";
    width: 3px;
    height: 3px;
    background: black;
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease-in-out, transform 0.2s ease-in-out;
    justify-self: center;
    align-self: center;
    /* transform: translate(-1px, -1px); */
}

.custom-checkbox input:checked + .checkmark::after {
    opacity: 1;
    transform: translate(-.5px, -.3px) scale(1);
}








// const pageSet = (function () {
    
//     const page = document.querySelector('body');

//     const controls = document.createElement('div');
//     controls.classList.add('inputControls');

//     const content = document.createElement('div');
//     content.classList.add('content');

//     const nameInput = document.createElement('input');
//     nameInput.type = 'text';
//     nameInput.placeholder = "Name your task here...";
//     nameInput.id = 'itemName';
//     nameInput.name = 'itemNameInp';


//     const descInput = document.createElement('textarea');
//     descInput.placeholder = "Write your task here...";
//     descInput.id = 'itemDesc';
//     descInput.name = 'itemDescInp';


//     const submitBtn = document.createElement('button');
//     submitBtn.id = 'submitBtn';
//     submitBtn.name = 'subBtn';




//     const logger = (state) => ({ log: () => console.log(`${state.item}:\n ${state.description}`) });
//     const deleter = (state) => ({ delete: () => TD_Library.splice(state, 1) });
//     const adder = (state) => ({ add: () => { state.itemNum = TD_Library.length + 1; TD_Library.push(state)} });
//     const displayer = (state) => ({ display: () => console.table(`${state.itemNum}: ${state.item}\n`, `${state.description}`) });

//     const TD_Library = [];

//     const cardArray = [];

//     const createCard = () => TD_Library.forEach((listItem) => {
//         const index = TD_Library.indexOf(listItem);
//         const displayCard = document.createElement('div');
//         displayCard.classList.add('displayCard');
//         displayCard.id = `dC${index + 1}`;
//         cardArray.push(displayCard);

//     })


//     const display = () => {
//         TD_Library.forEach((listItem) => {
//             const index = TD_Library.indexOf(listItem);
//             const dispCard = cardArray[index];

//             const customCheckboxIcon = `<label class="custom-checkbox">
//                                         <input type="checkbox">
//                                         <span class="checkmark"></span>
//                                     </label>`;

//             const IMP_customCheckbox = document.createElement('div');
//             IMP_customCheckbox.innerHTML = customCheckboxIcon;
//             IMP_customCheckbox.classList.add('customCheckboxWrap');



//             const trashCanSVG = `<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#5f6368">
//                                     <path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"/>
//                                 </svg>`;
//             const trashCan = document.createElement('div');
//             trashCan.innerHTML = trashCanSVG;
//             trashCan.classList.add('trashCan');
//             trashCan.firstChild.classList.add('trashCanSVG');
//             trashCan.firstChild.setAttribute('data-index', index);

//             cardArray[index].innerHTML = `<p><span class="taskSpan1">TASK: </span> <span class="taskSpan2">${listItem.item}</span> <br> <span class="descSpan1">DESCRIPTION: </span> <span class="descSpan2">${listItem.description}</span></p>`;
            
            // const hasCheckedInput = (crdArry) => {
            //     const input = crdArry.querySelector("input[type='checkbox'], input[type='radio']")
            //     return input ? input.checked : false;
            // }

            // const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    
            // checkboxes.forEach(checkbox => {
            //     const isChecked = localStorage.getItem(checkbox.id) === 'true';
            //     checkbox.checked = isChecked;

                
            //     checkbox.addEventListener('change', function () {
            //         localStorage.setItem(checkbox.id, checkbox.checked);
            //     });
            // });
            
    //         dispCard.append(IMP_customCheckbox);
    //         dispCard.append(trashCan);
    //         content.append(dispCard);
    // });
    // }


//     const toDoItem = (item, description) => {
//         let state = {
//             item,
//             description,
//             itemNum: 0,
//         }

//         return Object.assign(
//             {},
//             logger(state),
//             deleter(state),
//             adder(state),
//             displayer(state),
//         )
//     } 


//     const getPage = () => page;
//     const getControls = () => controls;
//     const getContent = () => content;
//     const getNameInp = () => nameInput;
//     const getDescInp = () => descInput;


//     controls.append(nameInput, descInput, submitBtn);
//     page.append(controls, content);


//     return { content, getPage, getContent, getControls, getNameInp, getDescInp, createCard, display, toDoItem }


// })();



// window.onload = (e) => {
//     pageSet.getNameInp().focus();
// }

// document.addEventListener('DOMContentLoaded', function () {
//     const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    
//     checkboxes.forEach(checkbox => {
//         const isChecked = localStorage.getItem(checkbox.id) === 'true';
//         checkbox.checked = isChecked;

        
//         checkbox.addEventListener('change', function () {
//             localStorage.setItem(checkbox.id, checkbox.checked);
//         });
//     });
// });

// submitBtn.addEventListener('click', () => {

    // const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    
    // checkboxes.forEach(checkbox => {
    //     const isChecked = localStorage.getItem(checkbox.id) === 'true';
    //     checkbox.checked = isChecked;

        
    //     checkbox.addEventListener('change', function () {
    //         localStorage.setItem(checkbox.id, checkbox.checked);
    //     });
    // });


//     let itemName = pageSet.getNameInp().value;
//     let itemDescription = pageSet.getDescInp().value;

//     const item = pageSet.toDoItem(itemName, itemDescription);
//     item.add(); 

//     pageSet.content.innerHTML = '';
//     pageSet.createCard();
//     pageSet.display();
//     pageSet.getNameInp().focus();
// });


// document.addEventListener('click', (e) => {
//     const card = e.target.closest('.displayCard');
//     if (card) {
//         console.log(card);
//       card.classList.toggle('show');
//     }
// });

// document.addEventListener('click', (e) => {
//     const markImportant = e.target.closest('.custom-checkbox')?.querySelector('input');



//     if(markImportant?.checked === true) {
//         const parentCard = e.target.closest('.displayCard');
//         parentCard.classList.toggle('important');
//     } 
// });



// document.addEventListener('DOMContentLoaded', function () {
//     const checkboxes = document.querySelectorAll('input[type="checkbox"]');

    
//     checkboxes.forEach(checkbox => {
//         const isChecked = localStorage.getItem(checkbox.id) === 'true';
//         checkbox.checked = isChecked;

        
//         checkbox.addEventListener('change', function () {
//             localStorage.setItem(checkbox.id, checkbox.checked);
//         });
//     });
// });

//   function updateYPosition() {
//     const screenHeight = window.innerHeight; // Get the current screen height
//     const fullHeight = 1080; // Define the original height you want to normalize with (in pixels, or use vh equivalent)
//     const ratio = screenHeight / fullHeight; // Calculate the ratio of current height to original height
  
//     document.documentElement.style.setProperty('--screen-ratio', ratio);
//   }
  
//   window.addEventListener('resize', updateYPosition);
  
//   updateYPosition();
